var search_data = {"index":{"searchIndex":["controlmoduleofapiendpoints","graphics","battleshipgui","model","grid","ship","shipobserver","sunk_ship_observer","object","opponentlogic","ai","randomshipgenerator","add_observer()","add_ships_from_data_source()","build_ship_positions()","check_win_condition()","check_win_condition()","clear_session()","compare_ships()","draw_ai_grid()","draw_grid_lines()","draw_grids()","draw_player_grid()","draw_ships()","generate_random_positions()","initialize_game_state()","load_grid_from_file()","main()","new()","new()","new()","new()","new()","new()","next_shot()","on_player_click()","opponent_shoots()","positions_overlap?()","random_ship_positions_array()","record_shot()","redraw_grids()","render_hit_or_miss()","render_player_ships()","render_sunk_ships()","run()","ship_afloat?()","ships=()","shoot_at_position()","shoot_at_ship()","update_sunk_positions()","update_sunk_positions()","win_condition_met?()","gemfile","gemfile.lock","readme","config","config.ru"],"longSearchIndex":["controlmoduleofapiendpoints","graphics","graphics::battleshipgui","model","model::grid","model::ship","model::shipobserver","model::sunk_ship_observer","object","opponentlogic","opponentlogic::ai","randomshipgenerator","model::grid#add_observer()","model::add_ships_from_data_source()","randomshipgenerator::build_ship_positions()","controlmoduleofapiendpoints::check_win_condition()","graphics::battleshipgui#check_win_condition()","controlmoduleofapiendpoints#clear_session()","model::ship#compare_ships()","graphics::battleshipgui#draw_ai_grid()","graphics::battleshipgui#draw_grid_lines()","graphics::battleshipgui#draw_grids()","graphics::battleshipgui#draw_player_grid()","graphics::battleshipgui#draw_ships()","randomshipgenerator::generate_random_positions()","controlmoduleofapiendpoints::initialize_game_state()","model::load_grid_from_file()","object#main()","graphics::battleshipgui::new()","model::grid::new()","model::ship::new()","model::shipobserver::new()","model::sunk_ship_observer::new()","opponentlogic::ai::new()","opponentlogic::ai#next_shot()","graphics::battleshipgui#on_player_click()","graphics::battleshipgui#opponent_shoots()","randomshipgenerator::positions_overlap?()","randomshipgenerator::random_ship_positions_array()","opponentlogic::ai#record_shot()","graphics::battleshipgui#redraw_grids()","graphics::battleshipgui#render_hit_or_miss()","graphics::battleshipgui#render_player_ships()","graphics::battleshipgui#render_sunk_ships()","graphics::battleshipgui#run()","model::ship#ship_afloat?()","model::grid#ships=()","model::grid#shoot_at_position()","model::ship#shoot_at_ship()","model::shipobserver#update_sunk_positions()","model::sunk_ship_observer#update_sunk_positions()","model::grid#win_condition_met?()","","","","",""],"info":[["ControlModuleOfAPIEndpoints","","ControlModuleOfAPIEndpoints.html","",""],["Graphics","","Graphics.html","",""],["Graphics::BattleshipGUI","","Graphics/BattleshipGUI.html","","<p>Represents the graphical user interface for the Battleship game.\n"],["Model","","Model.html","",""],["Model::Grid","","Model/Grid.html","","<p>Represents the grid for the Battleship game. The ‘Grid` class represents a game grid for battleships. …\n"],["Model::Ship","","Model/Ship.html","","<p>A ship that can be placed on the grid\n"],["Model::ShipObserver","","Model/ShipObserver.html","","<p>The ‘ShipObserver` class is a base class for observing a ship’s state.\n"],["Model::Sunk_ship_observer","","Model/Sunk_ship_observer.html","","<p>The ‘Sunk_ship_observer` class is a specialized observer for observing sunk ships.\n"],["Object","","Object.html","",""],["OpponentLogic","","OpponentLogic.html","",""],["OpponentLogic::AI","","OpponentLogic/AI.html","",""],["RandomShipGenerator","","RandomShipGenerator.html","",""],["add_observer","Model::Grid","Model/Grid.html#method-i-add_observer","(observer)","<p>Adds an observer to the list of observers for the grid.\n<p>@param observer [Object] The observer object to …\n"],["add_ships_from_data_source","Model","Model.html#method-c-add_ships_from_data_source","(source)","<p>Adds ships to the grid based on data from a data source (e.g., file).\n<p>@param [String] source The data …\n"],["build_ship_positions","RandomShipGenerator","RandomShipGenerator.html#method-c-build_ship_positions","(ship_size, positions_array, row_length)","<p>Builds ship positions for a given ship size, ensuring they do not overlap with existing positions.\n<p>@param …\n"],["check_win_condition","ControlModuleOfAPIEndpoints","ControlModuleOfAPIEndpoints.html#method-c-check_win_condition","(grid)",""],["check_win_condition","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-check_win_condition","(grid)","<p>Checks the win condition for the game.\n<p>@param [Grid] grid The grid to check for win condition. @return …\n"],["clear_session","ControlModuleOfAPIEndpoints","ControlModuleOfAPIEndpoints.html#method-i-clear_session","()",""],["compare_ships","Model::Ship","Model/Ship.html#method-i-compare_ships","(other_ship)","<p>Compares two ships to check if they are equal.\n<p>@param [Ship] other_ship The ship to compare. @return [Boolean] …\n"],["draw_ai_grid","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-draw_ai_grid","(canvas)","<p>Draws the AI’s grid on the canvas.\n<p>@param [TkCanvas] canvas The canvas to draw on.\n"],["draw_grid_lines","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-draw_grid_lines","(canvas, sizex, sizey, cell_size)","<p>Draws grid lines on the canvas.\n<p>@param [TkCanvas] canvas The canvas to draw on. @param [Integer] sizex …\n"],["draw_grids","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-draw_grids","()","<p>Draws both player and AI grids on the Tk root.\n"],["draw_player_grid","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-draw_player_grid","(canvas)","<p>Draws the player’s grid on the canvas.\n<p>@param [TkCanvas] canvas The canvas to draw on.\n"],["draw_ships","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-draw_ships","(ships, canvas, color)","<p>Draws ships on the canvas.\n<p>@param [Array&lt;Ship&gt;] ships An array of Ship objects. @param [TkCanvas] …\n"],["generate_random_positions","RandomShipGenerator","RandomShipGenerator.html#method-c-generate_random_positions","(ship_position_range, row_length)","<p>Generates random positions for a ship based on its size and orientation.\n<p>@param [Integer] ship_position_range …\n"],["initialize_game_state","ControlModuleOfAPIEndpoints","ControlModuleOfAPIEndpoints.html#method-c-initialize_game_state","(grid_size, num_ships)",""],["load_grid_from_file","Model","Model.html#method-c-load_grid_from_file","(file)","<p>Loads a grid from a file containing grid dimensions and ship data.\n<p>@param [String] file The path to the …\n"],["main","Object","Object.html#method-i-main","()","<p>main method to initialize the game\n"],["new","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-c-new","(grid1, grid2)","<p>Initializes a new instance of the BattleshipGUI class.\n<p>@param [Grid] grid1 The player’s grid. @param …\n"],["new","Model::Grid","Model/Grid.html#method-c-new","(size_x:, size_y:, ships: [], misses: [])","<p>Initializes a new instance of the ‘Grid` class.\n<p>@param size_x [Integer] The horizontal size of the grid. …\n"],["new","Model::Ship","Model/Ship.html#method-c-new","(ship_name, ship_positions)","<p>Initializes a new instance of the Ship class.\n<p>@param [String] ship_name The name of the ship. @param [Array&lt;Array&lt;Integer, …\n"],["new","Model::ShipObserver","Model/ShipObserver.html#method-c-new","(ship)","<p>Initializes a new instance of the ‘ShipObserver` class.\n<p>@param ship [Ship] The ship to observe.\n"],["new","Model::Sunk_ship_observer","Model/Sunk_ship_observer.html#method-c-new","(ship)","<p>Initializes a new instance of the ‘Sunk_ship_observer` class.\n<p>@param ship [Ship] The ship to observe. …\n"],["new","OpponentLogic::AI","OpponentLogic/AI.html#method-c-new","()","<p>Initializes a new instance of the AI class.\n"],["next_shot","OpponentLogic::AI","OpponentLogic/AI.html#method-i-next_shot","(grid)","<p>Gets the next shot for the AI based on the current state of the grid.\n<p>@param [Grid] grid The current state …\n"],["on_player_click","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-on_player_click","(x, y, ai_canvas, player_canvas)","<p>Handles the player’s click event on the canvas.\n<p>@param [Integer] x The x-coordinate of the click. …\n"],["opponent_shoots","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-opponent_shoots","(player_grid, player_canvas)","<p>Handles the opponent’s shot and updates the canvas accordingly.\n<p>@param [Grid] player_grid The player’s …\n"],["positions_overlap?","RandomShipGenerator","RandomShipGenerator.html#method-c-positions_overlap-3F","(positions1, positions2)","<p>Checks if two sets of positions overlap.\n<p>@param [Array&lt;Array&lt;Integer, Integer&gt;&gt;] positions1 …\n"],["random_ship_positions_array","RandomShipGenerator","RandomShipGenerator.html#method-c-random_ship_positions_array","(row_length)","<p>Generates an array of random ship positions based on predefined ship classes.\n<p>@param [Integer] row_length …\n"],["record_shot","OpponentLogic::AI","OpponentLogic/AI.html#method-i-record_shot","(shot, result, grid)","<p>Records the result of a shot fired by the AI.\n<p>@param [Array&lt;Integer, Integer&gt;] shot The coordinates …\n"],["redraw_grids","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-redraw_grids","()","<p>Redraws both player and AI grids.\n"],["render_hit_or_miss","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-render_hit_or_miss","(canvas, grid_x, grid_y, result)","<p>Renders a hit or miss on the canvas.\n<p>@param [TkCanvas] canvas The canvas to draw on. @param [Integer] …\n"],["render_player_ships","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-render_player_ships","(grid, canvas)","<p>Renders the player’s ships on the canvas.\n<p>@param [Grid] grid The player’s grid. @param [TkCanvas] …\n"],["render_sunk_ships","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-render_sunk_ships","(grid, canvas)","<p>Renders the opponent’s sunk ships on the canvas.\n<p>@param [Grid] grid The opponent’s grid. @param …\n"],["run","Graphics::BattleshipGUI","Graphics/BattleshipGUI.html#method-i-run","()","<p>Runs the Tk main loop.\n"],["ship_afloat?","Model::Ship","Model/Ship.html#method-i-ship_afloat-3F","()","<p>Checks if the ship is still afloat (not destroyed).\n<p>@return [Boolean] True if the ship is afloat, false …\n"],["ships=","Model::Grid","Model/Grid.html#method-i-ships-3D","(ship_array)","<p>Setter method for updating the set of ships on the grid.\n<p>@param ship_array [Array] An array of ships to …\n"],["shoot_at_position","Model::Grid","Model/Grid.html#method-i-shoot_at_position","(shot)","<p>Shoots at a specified position on the grid.\n<p>@param shot [Array] The position to shoot at in the format …\n"],["shoot_at_ship","Model::Ship","Model/Ship.html#method-i-shoot_at_ship","(shot)","<p>Fires a shot at the ship.\n<p>@param [Array&lt;Integer, Integer&gt;] shot The coordinates of the shot. @return …\n"],["update_sunk_positions","Model::ShipObserver","Model/ShipObserver.html#method-i-update_sunk_positions","(_)","<p>Updates the sunk positions based on the observed ship’s state change.\n<p>This method can be customized …\n"],["update_sunk_positions","Model::Sunk_ship_observer","Model/Sunk_ship_observer.html#method-i-update_sunk_positions","(ship)","<p>Updates the sunk positions based on the observed ship’s state change.\n<p>@param ship [Ship] The ship …\n"],["win_condition_met?","Model::Grid","Model/Grid.html#method-i-win_condition_met-3F","()","<p>Checks if the win condition is met (all ships are destroyed).\n<p>@return [Boolean] Returns true if the win …\n"],["Gemfile","","Gemfile.html","","<p># Gemfile source “rubygems.org” ruby ‘3.1.2’ gem ‘tk’\n<p>gem ‘unicorn’, …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>specs:\n  base64 (0.2.0)\n  kgio (2.11.0)\n  mustermann (3.0.0)\n    ruby2_keywords (~&gt; 0.0.1)\n  rack ...</pre>\n"],["README","","README_md.html","","<p>Battleship Game\n<p>Welcome to the Battleship Game – a Sinatra-based web application that lets you play Battleship …\n"],["config","","bundle/config.html","","<p>BUNDLE_BUILD__TK: “–with-tcltkversion=8.6 –with-tcl-lib=/usr/lib/x86_64-linux-gnu –with-tk-lib=/usr/lib/x86_64-linux-gnu …\n"],["config.ru","","config_ru.html","","<p>require ‘bundler/setup’ require ‘./Control_module_of_API_endpoint.rb’  # Adjust this …\n"]]}}